When would you want to use a remote repository rather than keeping all your work local?
>> This would be the cases when I want to share my work and collaborate with others. Then others can also pull my work, 
   make changes and push those to the remote.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
>> I would not want git to pull unneccessary changes, or pull changes when I am developing a new feature based on the current files. That could cause lots of issues and thus I will spend most of my time resolving conflicts and making my changes compatible with the lates files just pulled. Also, it would be much easir if I manually decide when to pull new changes, maybe after deciding if they need to be pulled. 

Describe the differences between forks, clones, and branches. When would you use one instead of another?
>> Forks : forks are used to clone a repo on the github ( remote ) itself, without the need to clone it locally, then cloning it , setting up new remote and pushing it to new remote.
           along with that github also helps with backlinks to the original repo from which the new repo is forked ( cloned ) which does help in recommending changes to the original.
   Clones: clones are done either locally or from remote to  local, wehre the whole repo is clones to the local machine i.e. a copy of that is made using the original. If done from remote, git automatically creates a remote link to the original. 
   Branches: These are part of the local repo, where one can separate out code per funcationality and allows simulteneous work on those features ( even if they modify the same files ). Its like having multiple workspaces based of same stream in perforce  or ucm. Branches can be merged later with the master stream once the feature is fully developed and approved. 

What is the benefit of having a copy of the last known state of the remote stored locally?
>> That way you know how far your changes have come from that state, when doing a pull it helps git determine what to merge and the conflicts. Also it helps you manually fetch and merge the changes. 

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
>> creating new branches for bugfixes/new features and then creating pull requests for those branches which will be reviewed by a peer tobe merged into master. However, this would work just fine if there are no conflicts or changes are small but it might get much harder if there are a lot of changes and conflicts.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
>> When developing a new feature, which is not complete yet and I want to collaborate with others on the same however without corruptinig the main branch, using a separate branch really keeps the changes separete and also promotes collaboration.

 Working on the master will be useful when you dont really need collaboration, and can wokr on the feature locally till its complete and thus simlifying the commit process.